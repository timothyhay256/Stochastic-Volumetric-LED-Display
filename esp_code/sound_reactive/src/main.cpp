/*
Using a microphone, this will react by (optionally filling the strand and then) playing playOnTrigger animation when the microphone goes HIGH
*/

#include <Arduino.h>
#include <FastLED.h>

const uint8_t playOnTrigger[] = {0x0d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x0b, 0x03, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x07, 0x09, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x09, 0x18, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x01, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x01, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x05, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x0b, 0x1f, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x1d, 0x16, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x10, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x02, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x08, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x21, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x07, 0x12, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x01, 0x06, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x1b, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x24, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x22, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x13, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x29, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x20, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x11, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x0c, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x1c, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x2f, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x1a, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x23, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x14, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x19, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x1d, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x03, 0x28, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x01, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x17, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x15, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x0b, 0x2b, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x25, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x27, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x0e, 0x2a, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x2e, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x30, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x09, 0x26, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x04, 0x31, 0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x02, 0x2d, 0x00, 0x00, 0x00};
int sizeOfAnimation = sizeof(playOnTrigger) / sizeof(playOnTrigger[0]);

const int microphonePin = 26;

#define LED_COUNT 50;
#define LED_PIN 27;

CRGB leds[LED_COUNT];

int currentIndex = 0;
int activeR = 0;
int activeG = 0;
int activeB = 0;
int activeIndex = 0;

void setup() {
    Serial.begin(115200);

    pinMode(microphonePin, INPUT);

    FastLED.addLeds<WS2811, LED_PIN, RGB>(leds, LED_COUNT);
    FastLED.setBrightness(255);
    FastLED.clear();
    FastLED.show();
}

void loop() {
    if (digitalRead(microphonePin) == HIGH) {
        Serial.println("Exceeded threshold, filling!");
        // fill_solid(leds, 50, CRGB(255, 255, 25));
        uint8_t thisHue = beat8(thisSpeed,255); 
        fill_rainbow(leds, 50, thisHue);
        FastLED.show();
        animate();
        // delay(1000);
    }
}

void animate() {
    currentIndex = 0;
    while (currentIndex < sizeOfAnimation) {
        if (playOnTrigger[currentIndex] == 1 && playOnTrigger[currentIndex+1] == 2 && playOnTrigger[currentIndex+2] == 3 && playOnTrigger[currentIndex+3] == 4) { // TODO: Delay multiplier to change speed of animations
            delay(playOnTrigger[currentIndex+4]);
            currentIndex += 5;
        } else { // No timing instruction, assume it is a LED instruction
            activeIndex = playOnTrigger[currentIndex];
            activeR = playOnTrigger[currentIndex+1];
            activeG = playOnTrigger[currentIndex+2];
            activeB = playOnTrigger[currentIndex+3];

            leds[activeIndex] = CRGB(activeR, activeG, activeB);
            FastLED.show();

            currentIndex += 4;
        }
    }
}