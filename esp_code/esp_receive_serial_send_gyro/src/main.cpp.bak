/*
This script will use one CPU core to accept led commands via serial,
 and the other to calculate and send the current angle of the jar (using MPU6050)
  over UDP to a target server.
Gets angle measurements using Jeff Rowbergs code from here: https://github.com/jrowberg/i2cdevlib
*/
#include <Arduino.h>
#include <FastLED.h> 
#include <WiFi.h>
/*
Begin MPU6050 Code
*/
#include "I2Cdev.h"
#include "MPU6050.h"

#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE
    #include "Wire.h"
#endif

MPU6050 mpu;

#define INTERRUPT_PIN 2  // use pin 2 on Arduino Uno & most boards
#define LED_PIN 13 // (Arduino is 13, Teensy is 11, Teensy++ is 6)
bool blinkState = false;

// MPU control/status vars
bool dmpReady = false;  // set true if DMP init was successful
uint8_t mpuIntStatus;   // holds actual interrupt status byte from MPU
uint8_t devStatus;      // return status after each device operation (0 = success, !0 = error)
uint16_t packetSize;    // expected DMP packet size (default is 42 bytes)
uint16_t fifoCount;     // count of all bytes currently in FIFO
uint8_t fifoBuffer[64]; // FIFO storage buffer

// orientation/motion vars
Quaternion q;           // [w, x, y, z]         quaternion container
VectorInt16 aa;         // [x, y, z]            accel sensor measurements
VectorInt16 aaReal;     // [x, y, z]            gravity-free accel sensor measurements
VectorInt16 aaWorld;    // [x, y, z]            world-frame accel sensor measurements
VectorFloat gravity;    // [x, y, z]            gravity vector
float euler[3];         // [psi, theta, phi]    Euler angle container
float ypr[3];           // [yaw, pitch, roll]   yaw/pitch/roll container and gravity vector

/*
End MPU6050 code
*/
TaskHandle_t ledCommands; // Task for multicore

const char* ssid = "STN";
const char* password = "88bb6b7054";

#define BAUD_RATE 921600
CRGB leds[50];

int n, r, g, b;

void receiveCommands(void * parameter);

void setup() {
  Serial.begin(BAUD_RATE);
  
  FastLED.addLeds<WS2811, 27, RGB>(leds, 50);
  FastLED.clear();
  FastLED.show(); 

  xTaskCreatePinnedToCore( // Start serial receive process 
      receiveCommands, /* Function to implement the task */
      "ledCommands", /* Name of the task */
      10000,  /* Stack size in words */
      NULL,  /* Task input parameter */
      0,  /* Priority of the task */
      &ledCommands,  /* Task handle. */
  0); /* Core where the task should run */
}

void loop() {
  // put your main code here, to run repeatedly:
}

void receiveCommands(void * parameter) {
  for (;;) {
    if (Serial.available() >= 4) { // Check if there are at least 4 bytes available
      n = Serial.read(); // Read the first byte and assign it to n
      r = Serial.read(); // Read the second byte and assign it to r
      g = Serial.read(); // Read the third byte and assign it to g
      b = Serial.read(); // Read the fourth byte and assign it to b

      // Set the color of the specified LED
      leds[n] = CRGB(r, g, b);
      FastLED.show();

      // Send acknowledgment back to Python
      Serial.write(0x01); // Send a single byte (acknowledgment)
    }
  }
}