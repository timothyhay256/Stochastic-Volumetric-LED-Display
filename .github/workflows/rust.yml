name: build
# Note this will NOT work for macOS without osxcross being built and placed in /opt/osxcross.

on:
  push:

permissions:
  contents: write

jobs:
  build:
    name: ${{ matrix.platform.os_name }} with rust ${{ matrix.toolchain }}
    runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux-x86_64
            target: x86_64-unknown-linux-gnu
            bin: svled-linux-amd64
          - os_name: Windows-x86_64
            target: x86_64-pc-windows-gnu
            bin: svled-amd64.exe
          - os_name: macOS-x86_64
            target: x86_64-apple-darwin
            bin: svled-macos-amd64
          - os_name: macOS-aarch64
            target: aarch64-apple-darwin
            bin: svled-macos-arm64
        toolchain:
          - nightly

    steps:
      - uses: actions/checkout@v3

      - name: Set up osxcross (macOS only)
        if: startsWith(matrix.platform.os_name, 'macOS')
        run: |
          echo "/opt/osxcross/target/bin" >> $GITHUB_PATH
          echo "OSXCROSS_MP_INC=1" >> $GITHUB_ENV
          echo "MACOSX_DEPLOYMENT_TARGET=10.13" >> $GITHUB_ENV

          if [ "${{ matrix.platform.target }}" = "x86_64-apple-darwin" ]; then
            echo "CC=x86_64-apple-darwin24.5-clang" >> $GITHUB_ENV
            echo "CXX=x86_64-apple-darwin24.5-clang++" >> $GITHUB_ENV
            echo "AR=x86_64-apple-darwin24.5-ar" >> $GITHUB_ENV
            echo "RANLIB=x86_64-apple-darwin24.5-ranlib" >> $GITHUB_ENV
            echo "CFLAGS=--target=x86_64-apple-darwin -fuse-ld=lld" >> $GITHUB_ENV
            echo "LDFLAGS=-fuse-ld=lld" >> $GITHUB_ENV
          elif [ "${{ matrix.platform.target }}" = "aarch64-apple-darwin" ]; then
            echo "CC=aarch64-apple-darwin24.5-clang" >> $GITHUB_ENV
            echo "CXX=aarch64-apple-darwin24.5-clang++" >> $GITHUB_ENV
            echo "AR=aarch64-apple-darwin24.5-ar" >> $GITHUB_ENV
            echo "RANLIB=aarch64-apple-darwin24.5-ranlib" >> $GITHUB_ENV
            echo "CFLAGS=--target=aarch64-apple-darwin -fuse-ld=lld" >> $GITHUB_ENV
            echo "LDFLAGS=-fuse-ld=lld" >> $GITHUB_ENV
          fi

      - name: Add Rust target
        run: rustup target add ${{ matrix.platform.target }}

      - name: Configure Cargo for macOS (only)
        if: startsWith(matrix.platform.os_name, 'macOS')
        run: |
          mkdir -p .cargo
          if [ "${{ matrix.platform.target }}" = "x86_64-apple-darwin" ]; then
            cat > .cargo/config.toml <<EOF
          [target.x86_64-apple-darwin]
          linker = "x86_64-apple-darwin24.5-clang"
          EOF
          elif [ "${{ matrix.platform.target }}" = "aarch64-apple-darwin" ]; then
            cat > .cargo/config.toml <<EOF
          [target.aarch64-apple-darwin]
          linker = "aarch64-apple-darwin24.5-clang"
          EOF
            fi


      - name: Build with appropriate toolchain
        run: |
          cargo build --target ${{ matrix.platform.target }} --release --locked

      - name: Rename binary
        run: |
          case "${{ matrix.platform.os_name }}" in
            Windows-x86_64)
              mv target/${{ matrix.platform.target }}/release/svled.exe target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
              ;;
            *)
              mv target/${{ matrix.platform.target }}/release/svled target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
              ;;
          esac

      - name: Generate SHA-256
        run: |
          FILE=target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
          shasum -a 256 "$FILE" | cut -d ' ' -f 1 > "$FILE.sha256"

      - name: Upload binary and SHA-256 checksum as build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-artifacts
          path: |
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}
            target/${{ matrix.platform.target }}/release/${{ matrix.platform.bin }}.sha256
